CREATE TRANSIENT TABLE STAGE_GAME_EVENTS (
    CLUB_ID INT,
    TOTAL_GOALS INT,
    TOTAL_SUBSTITUTIONS INT,
    TOTAL_CARDS INT,
    TOTAL_SHOOTOUTS INT,
    AVERAGE_ATTENDANCE DECIMAL (15,2),
    HOME_WINS INT,
    AWAY_WINS INT,
    DRAWS INT
);

CREATE TRANSIENT TABLE STAGE_PLAYERS (
    PLAYER_ID INT,
    FULL_NAME VARCHAR(60),
    DATE_OF_BIRTH DATE,
    LAST_SEASON INT,
    CURRENT_CLUB_ID INT,
    PLAYER_CODE VARCHAR(60),
    COUNTRY_OF_CITIZENSHIP VARCHAR(40),
    POSITION VARCHAR(15),
    FOOT VARCHAR(6),
    IS_ACTIVE BOOLEAN,
    AGE INT,
    AGE_CATEGORY VARCHAR(25),
    CURRENT_CLUB_DOMESTIC_COMPETITION_ID VARCHAR(5),
    CURRENT_CLUB_NAME TEXT,
    HIGHEST_MARKET_VALUE_IN_EUR INT
);

INSERT INTO STAGE_PLAYERS (
    PLAYER_ID,
    FULL_NAME,
    DATE_OF_BIRTH,
    LAST_SEASON,
    CURRENT_CLUB_ID,
    PLAYER_CODE,
    COUNTRY_OF_CITIZENSHIP,
    POSITION,
    FOOT,
    IS_ACTIVE,
    AGE,
    AGE_CATEGORY,
    CURRENT_CLUB_DOMESTIC_COMPETITION_ID,
    CURRENT_CLUB_NAME,
    HIGHEST_MARKET_VALUE_IN_EUR
)
WITH INFO_CACHE_PLAYERS AS (
    SELECT 
        PLAYER_ID,
        FIRST_NAME,
        LAST_NAME,
        LAST_SEASON,
        CURRENT_CLUB_ID,
        PLAYER_CODE,
        COUNTRY_OF_CITIZENSHIP,
        DATE_OF_BIRTH,
        POSITION,
        FOOT,
        CURRENT_CLUB_DOMESTIC_COMPETITION_ID,
        CURRENT_CLUB_NAME,
        HIGHEST_MARKET_VALUE_IN_EUR,
        CASE
            WHEN LAST_SEASON IS NULL OR LAST_SEASON >= EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN TRUE
            ELSE FALSE
        END AS IS_ACTIVE,
        FLOOR(DATEDIFF('day', DATE_OF_BIRTH, CURRENT_DATE) / 365.25) AS AGE,
        CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME
    FROM 
        LANDING.PLAYERS
)
SELECT 
    PLAYER_ID,
    FULL_NAME,
    DATE_OF_BIRTH,
    LAST_SEASON,
    CURRENT_CLUB_ID,
    PLAYER_CODE,
    COUNTRY_OF_CITIZENSHIP,
    POSITION,
    FOOT,
    IS_ACTIVE,
    AGE,
    CASE 
        WHEN AGE BETWEEN 36 AND 45 THEN 'SUPER SENIOR LEAGUE'
        WHEN AGE BETWEEN 45 AND 50 THEN 'RETIRED'
        ELSE 'OVER AGED'
    END AS AGE_CATEGORY,
    CURRENT_CLUB_DOMESTIC_COMPETITION_ID,
    CURRENT_CLUB_NAME,
    HIGHEST_MARKET_VALUE_IN_EUR
FROM 
    INFO_CACHE_PLAYERS;

INSERT INTO STAGE_GAME_EVENTS (
    CLUB_ID,
    TOTAL_GOALS,
    TOTAL_SUBSTITUTIONS,
    TOTAL_CARDS,
    TOTAL_SHOOTOUTS,
    AVERAGE_ATTENDANCE,
    HOME_WINS,
    AWAY_WINS,
    DRAWS
)
SELECT 
    CLUB_ID,
    COALESCE(
        SUM(CASE WHEN GE.TYPE = 'Goals' AND (GE.CLUB_ID = G.home_club_id OR GE.CLUB_ID = G.away_club_id) AND GE.CLUB_ID = G.home_club_id THEN 1 ELSE 0 END) +
        SUM(CASE WHEN GE.TYPE = 'Goals' AND (GE.CLUB_ID = G.home_club_id OR GE.CLUB_ID = G.away_club_id) AND GE.CLUB_ID = G.away_club_id THEN 1 ELSE 0 END),
        0
    ) AS TOTAL_GOALS,
    COALESCE(
        SUM(CASE WHEN GE.TYPE = 'Substitutions' AND (GE.CLUB_ID = G.home_club_id OR GE.CLUB_ID = G.away_club_id) THEN 1 ELSE 0 END),
        0
    ) AS TOTAL_SUBSTITUTIONS,
    COALESCE(
        SUM(CASE WHEN GE.TYPE = 'Cards' AND (GE.CLUB_ID = G.home_club_id OR GE.CLUB_ID = G.away_club_id) THEN 1 ELSE 0 END),
        0
    ) AS TOTAL_CARDS,
    COALESCE(
        SUM(CASE WHEN GE.TYPE = 'Shootout' AND (GE.CLUB_ID = G.home_club_id OR GE.CLUB_ID = G.away_club_id) THEN 1 ELSE 0 END),
        0
    ) AS TOTAL_SHOOTOUTS,
    AVG(G.attendance) AS AVERAGE_ATTENDANCE,
       COALESCE(
        SUM(CASE WHEN G.home_club_goals > G.away_club_goals AND GE.CLUB_ID = G.home_club_id THEN 1 ELSE 0 END),
        0
    ) AS HOME_WINS,
    COALESCE(
        SUM(CASE WHEN G.away_club_goals > G.home_club_goals AND GE.CLUB_ID = G.away_club_id THEN 1 ELSE 0 END),
        0
    ) AS AWAY_WINS,
    COALESCE(
        SUM(CASE WHEN G.home_club_goals = G.away_club_goals THEN 1 ELSE 0 END),
        0
    ) AS DRAWS
FROM 
    LANDING.GAME_EVENTS GE
    JOIN LANDING.GAMES G ON GE.game_id = G.game_id
GROUP BY
    CLUB_ID;
